
Une fonction peut être appellé avec un nombre variable d'arguments (+ ou - que le nombre normal défini dans la définition de la fonction)
arguments = tableau contenant les arguments passés en paramètre lors de l'appel de la fonction.

function maFonction(arg1, arg2) {
   arguments.lenght;
   arguments.forEach(function(arg) {
      instruction(s);
   });
}


accés à la valeur d'une propriété
monObjet.maPropriete;
monObjet['maPropriete'];

modif de la valeur ou ajout d'une propriété à un objet si elle n'existe pas encore :
monObjet.maPropriete = maValeur;
monObjet['maPropriete'] = maValeur;

supression d'une propriété d'un objet :
delete monObjet['maPropriete'];


définition d'une propriété avec toutes ses caractéristiques :
maPropriete: { writable: true, configurable: true, enumerable: true, value: 'John' }
writable = modifiable (false => constante)
configuragle = accés (false => avec getter et setter)
enumerable = scope (false => accés uniquement dans l'objet. equiv "private" en Java)



monObjet.__proto = accés à l'objet prototype de monObjet


document.getElementById('monId').onclick = maFonction;
equiv à 
	document.getElementById('monId').addEventListener('click', maFonction);



//Redirection vers une autre page avec modification de l'URL dans le navigateur
monElt.addEventListener('click', function() {
   window.location = 'http://monurl.com';
});


















==========================================================================Code pret :
	fichier A
//--------------- Requette HTTP asynchrone
function sendAsynchronousGetRequest(url, callback) {
    const req = new XMLHttpRequest();
    req.onreadystatechange = function(event) {
        // XMLHttpRequest.DONE === 4
        if (this.readyState === XMLHttpRequest.DONE) {
            if (this.status === 200) {
                console.log("Réponse reçu: %s", this.responseText);
                if(callback && typeof callback === 'function') {
                    jsonResponse = JSON.parse(this.responseText);
                    callback(jsonResponse);
                }
            } else {
                console.log("Status de la réponse: %d (%s)", this.status, this.statusText);
            }
        }
    };

    if(!url instanceof URL) {
        throw new Error('L\'URL n\'est pas valide');
    }

    req.open('GET', url.toString(), true);
    req.send(null);
}

	fichier B
var app = {
    init: function() {
        var url = new URL('https://api.github.com/users/AlexandreRamade');
        try {
            sendAsynchronousGetRequest(url, app.afficherProfilGitHub);
        } catch (e) {
            console.log(e);
        }
    },

    afficherProfilGitHub: function(profileJson) {
        var pseudoElt = document.createElement('h3');
        pseudoElt.innerHTML = "Pseudo : " + profileJson.login;
        
        var nameElt = document.createElement('p');
        nameElt.innerHTML = "Nom : " + profileJson.name;      

        app.addEltToContainer(avatarElt, pseudoElt, nameElt);        
    },

    addEltToContainer: function() {
        var containerElt = document.getElementById('container');
        for(i = 0, lim = arguments.length; i < lim; i++) {
            console.log(arguments[i]);
            containerElt.appendChild(arguments[i]);
        }
    }
}

============================================================================================












