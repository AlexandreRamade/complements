
Télécharger Maven sur http://maven.apache.org
L'instaler à la racine du lecteur C:
Créer une variable d'environnement JAVA_HOME - adresse du JDK (jdk.1.8...)
Mettre à jour la variable PATH avec l'adresse du repertoire bin de Maven (permet d'utiliser mvn en ligne de commande)
	tester avec la commande : mvn --version

Lors de la génération d'un projet Maven, il faut définir obligatoirement :
	-groupId: Dev
	-artifactID: nomduprojet
	-version: 1.0SNAPSHOT
	-package: dev

----------------------------Contenu du projet :
Fichier POM
	gère les dépendances
/src/main/
	code source
/src/test/
	test unitaire JUnit
/src/main/resources
	contiens les fichier .properties
	contiens les autres fichiers resources
/target
	code compilé (.class et jar)


--------------------------------Ligne de commandes utiles :

mvn compile		compile le code source
mvn clean		vide le contenu du dossier target/
mvn clean compile	2 actions succéssives

mvn package		génére un fichier JAR exécutable dans le dossier target/
java -jar target/monProjet.jar		lancer le projet
mvn instal		instale le projet dans le dossier (par défaut) utilisateur/xxx/.m2/repository/...



------------------------------- Contenu du POM
=> Tout encodé en UTF-8
<properties>
	<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
</properties>




<properties>
   <maPropriete>maValeur</maPropriete>
</properties>

==> réutilisation de la propriété ailleur dans le POM avec EL :
   <aaa>${maPropriete}</aaa>



Définition d'un nom qui sera utilisé lors de la création du package à la place du nom du projet
<build>
   <finalName>monNomFinal</finalName>
</build>

==> monNomFinal.jar

Activation du remplacement de la valeur des propriété via Maven (= accés aux valeurs des <properties> depuis le code Java)
<build>
   <resources>
      <resource>
         <directory>src/main/resources</directory>
         <filtering>true</filtering>
      </resource>
   </resources>
</build>


indique l'adresse du la classe Main à lancer au démarage pour pouvoir générer un JAR exécutable
et précise avec maven-shade-plugin que le JAR doit contenir toutes les dépendances pour être fonctionnel
<plugin>
   <groupId>...
   <artifactId>...
   <version>...
   <configuration>
      <archive>
         <manifest>
            <mainClass>monPackage.MaClasseMain</mainClass>
         </manifest>
      </archive>
   </configuration>
</plugin>
<plugin>
   <groupId>org.apache.maven.plugins</groupId>
   <artifactId>maven-shade-plugin</artifactId>
   <version>3.0.0</version>
   <executions>
      <execution>
         <phase>package</phase>
         <goals>
            <goal>shade</goal>
         </goals>
      </execution>
   </executions>
</plugin>




creer plusieurs profils pour utiliser des valeurs de propriétés différents selon celui activé

   <profiles>
      <profile>
         <id>dev</id>
         <activation>
            <activeByDefault>true</activeByDefault>
         </activation>
         <properties>
            <mode>DEV</mode>
         </properties>
      </profile>
      <profile>
         <id>prod</id>
         <properties>
            <mode>PROD</mode>
         </properties>
      </profile>
   </profiles>
</project>

utilisation du profil PROD :
mvn package -Pprod



-------------------------------------Récupérer contenu des fichier .properties contenus dans /src/main/resources/
/src/main/resources/application.properties

contenu de application.properties
monParametre1:maValeur1
monParametre2:${maProprieteDansPOM}	//Attention, valable uniquement si remplacement des valeurs activés dans le POM

Dans le code Java :
String valeur = ResourceBundle.getBundle("application").getString("monParametre1");





