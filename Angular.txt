Angular

   finir Guard et Resolver à partir du cours et des TP



____________________Programation réative_____________________________________
site ReactiveX		permet de créer un projet en prog réactive pour plusieurs langages

RxJS	en ES6

But vis-à-vis des fonctions : avoir uniquement des Pures Fonctions, cad des fonctions qui ne dépendent pas d'un paramètre/argument en dehors de leur corps
=> faible couplage, plus facile d'entretient, plus de lisibilité, ...


							création d'un suscriber
							Rq: hot observable qui n'a pas de complite() qui le termine
								cold observable a un complite() qui le termine
							Rq: par convention on sufixe une variable observable avec $
const observable$ = new Observable(suscriber => {
   suscriber.next(1);
   suscriber.next(2);
   setTimout(() => {
      suscriber.next(3);
      suscriber.complite();
   }, 1000);
}

						s'abonne au éléments retournés par l'observable et leur applique un traitement
						ATTENTION : lorsque le traitement est terminé, il faut se désinscrire pour ne pas avoir de fuite de mémoire !
	
observable.subscribe({
  next(x) { console.log('got value ' + x); },
  error(err) { console.error('something wrong occurred: ' + err); },
  complete() { console.log('done'); }
});



Exemple d'un hot observable :
import { fromEvent } from 'rxjs';		=> fromEvent permet la création d'un observable

monObservable$:Observable = fromEvent(document, 'click').suscribe(() => console.log('Clicked on the page');



	pipe(   )		permet de chainer des opérations à l'intérieur avant l'appel du suscribe

import { fromEvent } from 'rxjs';
import { scan } from 'rxjs/operators';

monObservable$:Observable = fromEvent(document, 'click')
   .pipe(scan(count => count +1, 0))
   .suscribe(count => console.log(`Clicked ${count} fois`));








 






















